name: Build Chunky Executables

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: chunky-linux
            asset_name: chunky-linux
          - os: windows-latest
            artifact_name: chunky-windows
            asset_name: chunky-windows
          - os: macos-latest
            artifact_name: chunky-mac
            asset_name: chunky-mac

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Get version from tag
      id: get_version
      shell: bash
      run: |
        # Extract version from tag name (e.g., v1.0.0 -> 1.0.0)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      if: startsWith(github.ref, 'refs/tags/')
        
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: pyinstaller --onefile --name ${{ matrix.artifact_name }}-${{ env.VERSION || '1.0.0' }} chunky.py
        
    - name: Build with PyInstaller (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: pyinstaller --onefile --name ${{ matrix.artifact_name }}-${{ env.VERSION || '1.0.0' }} chunky.py
        
    - name: Create ZIP archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        7z a ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.zip ${{ matrix.artifact_name }}-${{ env.VERSION || '1.0.0' }}.exe
        
    - name: Create TAR archive (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        cd dist
        tar -czvf ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.tar.gz ${{ matrix.artifact_name }}-${{ env.VERSION || '1.0.0' }}
        
    - name: Generate SHA256 checksums
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.zip SHA256 > ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.zip.sha256
          # Clean up certutil output to just the hash
          powershell -Command "(Get-Content ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.zip.sha256 | Select-Object -Index 1).Trim() | Set-Content ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.zip.sha256"
        else
          shasum -a 256 ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.tar.gz > ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}.tar.gz.sha256
        fi
      shell: bash
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}
        path: |
          dist/${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}*

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/${{ matrix.asset_name }}-${{ env.VERSION || '1.0.0' }}*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}