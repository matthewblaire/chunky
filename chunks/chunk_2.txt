<<<START: .gitignore>>>
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Virtual environments
venv/
ENV/
env/
.env/

# IDE specific files
.idea/
.vscode/
*.swp
*.swo
.DS_Store
.history

# Test artifacts
.coverage
htmlcov/
.pytest_cache/
.tox/
nosetests.xml
coverage.xml

# Specific to this project
chunks/
<<<END: .gitignore>>>

<<<START: README.md>>>
# Chunky - Simple File Chunking Tool

![GitHub release (latest by date)](https://img.shields.io/github/v/release/matthewblaire/chunky)
![GitHub all releases](https://img.shields.io/github/downloads/matthewblaire/chunky/total)
![License](https://img.shields.io/github/license/matthewblaire/chunky)

Chunky is a command-line tool that divides files in a folder into chunks without splitting file contents. This is useful for processing large collections of files in parallel or for fitting files into size constraints.

## Features

- Divides files across multiple output chunks without breaking up individual files
- Recursive directory traversal
- Supports ignoring files with `.chunkyignore` (GitIgnore-style patterns)
- Cross-platform: works on Windows, macOS, and Linux
- Simple installation process

## Installation

### Quick Install (Recommended)

**One-line install:**

```bash
# For macOS/Linux
curl -sSL https://raw.githubusercontent.com/matthewblaire/chunky/master/install.py | python3

# For Windows (PowerShell)
(Invoke-WebRequest -Uri https://raw.githubusercontent.com/matthewblaire/chunky/master/install.py -UseBasicParsing).Content | python
```

### Manual Install Steps

1. Download the installer script:
   ```bash
   # For macOS/Linux
   curl -O https://raw.githubusercontent.com/matthewblaire/chunky/master/install.py
   
   # For Windows (PowerShell)
   Invoke-WebRequest -Uri https://raw.githubusercontent.com/matthewblaire/chunky/master/install.py -OutFile install.py
   ```

2. Run the installer:
   ```bash
   python3 install.py  # Use 'python' on Windows
   ```

3. Verify installation:
   ```bash
   chunky --version
   ```

If you see `Chunky version 1.0.5` (or similar), the installation was successful!

### Direct Download Option

If you prefer to download the binaries directly:

1. Visit the [releases page](https://github.com/matthewblaire/chunky/releases)
2. Download the appropriate file for your system:
   - Windows: `chunky-windows-1.0.5.zip`
   - macOS: `chunky-mac-1.0.5.tar.gz`
   - Linux: `chunky-linux-1.0.5.tar.gz`
3. Extract the file and place the executable in your PATH

## Usage

Basic usage:

```bash
chunky path/to/folder --chunks 5
```

This command will:
1. Find all files in the specified folder (recursively)
2. Divide them into 5 chunks
3. Create a `chunks` subfolder with the chunked files

### Options

```
chunky --help
```

Available options:
- `--chunks`, `-c`: Number of output chunks (default: 2)
- `--output-prefix`: Prefix for output files (default: "chunk")
- `--version`, `-v`: Show version and exit

### Ignoring Files

Create a `.chunkyignore` file in your target folder to exclude files using gitignore-style patterns:

```
# Ignore all log files
*.log

# Ignore the node_modules directory
node_modules/

# Ignore specific files
secrets.txt
```

## Examples

```bash
# Split a project into 3 chunks
chunky my_project --chunks 3

# Split with custom output file naming
chunky documents --chunks 4 --output-prefix document_set

# Check version
chunky --version
```

## How It Works

Chunky uses a round-robin algorithm to distribute files across chunks, ensuring that:

1. Files are never split across chunks (each file remains whole)
2. Files are distributed as evenly as possible among chunks
3. Each chunk contains the complete file contents with metadata tags

## Building from Source

To build from source:

```bash
# Clone the repository
git clone https://github.com/matthewblaire/chunky.git
cd chunky

# Install dependencies
pip install -r requirements.txt

# Run the script directly
python chunky.py path/to/folder --chunks 3

# Or build binaries with PyInstaller
pip install pyinstaller
pyinstaller --onefile --name chunky chunky.py
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the Mozilla Public License 2.0 (MPL-2.0) - see the LICENSE file for details.

<<<END: README.md>>>

<<<START: chunky.py>>>
#!/usr/bin/env python3
"""
Chunky - A tool to divide files in a folder into chunks without splitting file contents.

This script helps organize files for parallel processing or to fit within size constraints.
"""
import os
import sys
import argparse
from pathlib import Path

# Add version constant
VERSION = "1.0.6"

try:
    import pathspec
except ImportError:
    print("The pathspec module is not installed. Run 'pip install pathspec'")
    sys.exit(1)


def load_ignore_spec(folder: Path, ignore_filename=".chunkyignore"):
    """
    Load ignore patterns from the ignore file (if present) and compile them using pathspec.

    Args:
        folder (Path): The folder to look for the ignore file.
        ignore_filename (str): The name of the ignore file.
        
    Returns:
        A compiled pathspec object for matching ignored files.
    """
    ignore_file = folder / ignore_filename
    if not ignore_file.exists():
        return None

    with ignore_file.open("r") as f:
        lines = f.read().splitlines()

    # Compile patterns using GitIgnorePattern (see pathspec docs for more information)
    spec = pathspec.PathSpec.from_lines("gitwildmatch", lines)
    return spec


def list_files(folder: Path, ignore_spec):
    """
    Recursively list all files in folder (as Path objects) that are not matched by the ignore spec.
    
    Args:
        folder (Path): The root folder to search.
        ignore_spec: A compiled pathspec object for filtering out ignored files, or None.
    
    Returns:
        A list of Path objects representing files to be chunked.
    """
    all_files = []
    # Use rglob to search recursively for files
    for file in folder.rglob("*"):
        if file.is_file():
            # Create the path relative to the folder root (so that ignore patterns work correctly)
            rel_path = file.relative_to(folder)
            # If we have an ignore spec, check if the file should be ignored
            if ignore_spec and ignore_spec.match_file(str(rel_path)):
                continue
            all_files.append(file)
    # Optionally sort the files; here we sort by relative path
    return sorted(all_files, key=lambda p: str(p))


def chunk_files(files, n_chunks):
    """
    Divide the list of file paths into n_chunks groups. Files are NOT split in half; each file's
    entire content remains intact.
    
    This function partitions the file list into as equal slices as possible.
    
    Args:
        files (list): List of file paths to be chunked.
        n_chunks (int): Number of output chunks.
        
    Returns:
        A list of lists, where each sublist is a group of file paths.
    """
    chunks = [[] for _ in range(n_chunks)]
    # Simple round-robin assignment ensures files are not split across chunks.
    for index, file in enumerate(files):
        chunks[index % n_chunks].append(file)
    return chunks


def write_chunk(chunk, output_path, folder_root: Path):
    """
    Write one output chunk file which contains the data of all files in that chunk.
    Before and after each file's content, insert tags with the file's relative path info.
    
    Args:
        chunk (list): List of Path objects (files) belonging to this chunk.
        output_path (Path): The file path to write the chunk data.
        folder_root (Path): The original root folder for proper relative tagging.
    """
    with output_path.open("w", encoding="utf-8") as out_f:
        for file_path in chunk:
            # Get file's relative path from the folder root
            rel_file_path = file_path.relative_to(folder_root)
            # Write pre-file tag (you can change the tag format if desired)
            out_f.write(f"<<<START: {rel_file_path}>>>\n")
            try:
                with file_path.open("r", encoding="utf-8") as in_f:
                    content = in_f.read()
                out_f.write(content)
            except Exception as e:
                # It is useful to log errors if a file could not be read
                out_f.write(f"[Error reading file: {e}]\n")
            # Write post-file tag
            out_f.write(f"\n<<<END: {rel_file_path}>>>\n\n")
            

def parse_arguments():
    """
    Parse command-line arguments: the folder path and optional number of chunks.
    """
    parser = argparse.ArgumentParser(description="Chunkifier: divide files in a folder into chunks without splitting file contents.")
    
    # Add a version command
    parser.add_argument('--version', '-v', action='store_true', help='Show the version number and exit')
    
    # Only require folder if not checking version
    if '--version' not in sys.argv and '-v' not in sys.argv:
        parser.add_argument("folder", type=str, help="Path to the folder to be chunked")
        parser.add_argument("--chunks", "-c", type=int, default=2, help="Number of output text files (chunks, default: 2)")
        parser.add_argument("--output-prefix", type=str, default="chunk", help="Prefix for output files (default 'chunk')")
    else:
        parser.add_argument("folder", type=str, nargs='?', help="Path to the folder to be chunked")
        parser.add_argument("--chunks", "-c", type=int, default=2, help="Number of output text files (chunks, default: 2)")
        parser.add_argument("--output-prefix", type=str, default="chunk", help="Prefix for output files (default 'chunk')")
    
    args = parser.parse_args()
    return args


def main():
    args = parse_arguments()
    
    # Check if version was requested
    if args.version:
        print(f"Chunky version {VERSION}")
        sys.exit(0)
    
    # Ensure folder is provided if not checking version
    if not args.folder:
        print("Error: Folder path is required")
        print("Usage: chunky [folder] [options]")
        print("For help, use: chunky --help")
        sys.exit(1)
    
    folder_path = Path(args.folder)
    if not folder_path.exists() or not folder_path.is_dir():
        print(f"Error: The folder path '{folder_path}' does not exist or is not a directory.")
        sys.exit(1)

    # Load ignore spec from .chunkyignore if it exists in the root folder
    ignore_spec = load_ignore_spec(folder_path)

    # List all non-ignored files in the folder (recursively)
    files = list_files(folder_path, ignore_spec)
    if not files:
        print("No files found for chunking after applying ignore rules.")
        sys.exit(0)

    # Use the specified number of chunks (with a default of 2)
    n_chunks = args.chunks
    chunks = chunk_files(files, n_chunks)

    # Write out each chunk to a separate text file
    output_dir = folder_path / "chunks"
    output_dir.mkdir(exist_ok=True)  # Create the 'chunks' directory if it doesn't exist

    for i, chunk in enumerate(chunks, start=1):
        output_filename = f"{args.output_prefix}_{i}.txt"
        output_path = output_dir / output_filename
        write_chunk(chunk, output_path, folder_path)
        print(f"Wrote {len(chunk)} files to {output_path}")

        
if __name__ == "__main__":
    main()
<<<END: chunky.py>>>

<<<START: pyproject.toml>>>
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chunky"
version = "1.0.6"
description = "A tool to divide files in a folder into chunks without splitting file contents"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MPL-2.0"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Operating System :: OS Independent",
]
requires-python = ">=3.7"
dependencies = [
    "pathspec>=0.9.0",
]

[project.urls]
"Homepage" = "https://github.com/matthewblaire/chunky"
"Bug Tracker" = "https://github.com/matthewblaire/chunky/issues"

[project.scripts]
chunky = "chunky:main"
<<<END: pyproject.toml>>>

